import {Component, PropTypes} from 'react';
import {bindActionCreators} from 'redux';
import {connect} from 'react-redux';

import {metrics} from '@ciscospark/react-component-utils';

import {
  connectToMercury,
  updateStatusConnecting,
  updateStatusConnected
} from './actions';

const metricName = {
  MERCURY_CONNECT_START: `mercuryConnection:start`,
  MERCURY_CONNECT_END: `mercuryConnection:end`,
  MERCURY_CONNECT_DURATION: `mercuryConnection:duration`
};

class MercuryComponent extends Component {

  componentDidMount() {
    const props = this.props;
    const {spark} = props;

    spark.listenToAndRun(spark.mercury, `change:connecting`, () => {
      props.updateStatusConnecting(spark.mercury.connecting);
    });

    spark.listenToAndRun(spark.mercury, `change:connected`, () => {
      props.updateStatusConnected(spark.mercury.connected);
    });

    this.setupMercury(this.props);
  }

  componentWillReceiveProps(nextProps) {
    this.setupMercury(nextProps);
  }

  shouldComponentUpdate(nextProps) {
    return nextProps.mercury !== this.props.mercury;
  }

  setupMercury(props) {
    const spark = props.spark;

    if (spark && spark.canAuthorize && spark.device.registered
      && !spark.mercury.connected && !spark.mercury.connecting) {
      metrics.saveElapsedTime(metricName.MERCURY_CONNECT_START);
      metrics.sendTempMetric(metricName.MERCURY_CONNECT_START, spark);
      props.connectToMercury(spark).then(() => {
        metrics.saveElapsedTime(metricName.MERCURY_CONNECT_END);
        metrics.sendTempMetric(metricName.MERCURY_CONNECT_END, spark);
        metrics.sendDurationMetric(
          metricName.MERCURY_CONNECT_DURATION,
          metricName.MERCURY_CONNECT_START,
          metricName.MERCURY_CONNECT_END,
          spark
        );
      });
    }
  }

  render() {
    return null;
  }
}

const injectedPropTypes = {
  connectToMercury: PropTypes.func.isRequired,
  updateStatusConnecting: PropTypes.func.isRequired,
  updateStatusConnected: PropTypes.func.isRequired
};

MercuryComponent.propTypes = {
  spark: PropTypes.object,
  ...injectedPropTypes
};

export default connect(
  (state) => ({
    mercury: state.mercury
  }),
  (dispatch) => bindActionCreators({
    connectToMercury,
    updateStatusConnected,
    updateStatusConnecting
  }, dispatch)
)(MercuryComponent);
