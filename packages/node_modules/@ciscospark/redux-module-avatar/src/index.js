import {fromJS} from 'immutable';

export const initialState = fromJS({
  items: {},
  avatarsInFlight: {}
});

export const ADD_AVATAR = `avatar/ADD_AVATAR`;
export const ADD_AVATAR_BEGIN = `avatar/ADD_AVATAR_BEGIN`;

export default function reducer(state = initialState, action) {
  switch (action.type) {
  case ADD_AVATAR:
    {
      const {userId, avatar} = action.payload;
      return state.setIn([`items`, userId], avatar).deleteIn([`avatarsInFlight`, userId]);
    }
  case ADD_AVATAR_BEGIN:
    return state.setIn([`avatarsInFlight`, action.payload.userId], true);
  default:
    return state;
  }
}


export function fetchAvatarForUserId(userId, spark) {
  return (dispatch) => {
    dispatch(addAvatarBegin(userId));
    return spark.avatar.retrieveAvatarUrl(userId)
      .then((avatarUrl) =>
        dispatch(addAvatar(userId, avatarUrl))
      );
  };
}

function addAvatar(userId, avatar) {
  return {
    type: ADD_AVATAR,
    payload: {
      userId,
      avatar
    }
  };
}

function addAvatarBegin(userId) {
  return {
    type: ADD_AVATAR_BEGIN,
    payload: {
      userId
    }
  };
}
