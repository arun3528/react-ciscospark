import {combineReducers} from 'redux';
import {fromJS} from 'immutable';
import {reducers as messageReducers} from '@ciscospark/widget-message';
import {reducers as meetReducers} from '@ciscospark/widget-meet';
import mercury from '@ciscospark/redux-module-mercury';

import {
  ACTIVITY_TYPE_MESSAGE,
  REMOVE_WIDGET,
  UPDATE_ACTIVITY_MENU_VISIBLE,
  UPDATE_ACTIVITY_TYPE
} from './actions';

export const STATE_NAME = `widgetMessageMeet`;

export const initialState = fromJS({
  activityType: ACTIVITY_TYPE_MESSAGE,
  activityMenuVisible: false
});

export function reducer(state = initialState, action) {
  switch (action.type) {
  case UPDATE_ACTIVITY_MENU_VISIBLE:
    return state.set(`activityMenuVisible`, action.payload.isActivityMenuVisible);

  case UPDATE_ACTIVITY_TYPE:
    return state.set(`activityType`, action.payload.type);

  default:
    return state;
  }
}


// Do not like this pattern, but can't get combined reducers to serial correctly
export const reducers = Object.assign({widgetMessageMeet: reducer, mercury}, messageReducers, meetReducers);
const widgetReducer = combineReducers(reducers);

export default function rootReducer(state, action) {
  if (action.type === REMOVE_WIDGET) {
    state = undefined;
  }
  return widgetReducer(state, action);
}
